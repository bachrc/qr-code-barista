{"version":3,"sources":["assets/logo.png","QrCode.tsx","App.tsx","reportWebVitals.js","serviceWorkerRegistration.ts","index.tsx"],"names":["QrCode","props","base64Image","qrCode","className","alt","src","href","download","App","useState","urlValue","setUrlValue","wasmGenerator","setWasmGenerator","undefined","image","setImage","useEffect","a","loadGenerator","logo","onSubmit","event","preventDefault","generate_qr_code_from_url","value","onChange","e","target","type","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a842c6ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.c03bcf12.png\";","import React from \"react\";\n\nexport interface QrCodeContent {\n    qrCode: string\n}\n\nexport function QrCode(props: QrCodeContent) {\n    function base64Image() {\n        return \"data:image/png;base64,\" + props.qrCode;\n    }\n\n    return <div className=\"flex flex-col gap-5\">\n        <img alt=\"QR Code généré\" src={base64Image()}/>\n        <a href={base64Image()}\n           download=\"infused-qr-code\"\n           className=\"py-4 px-7 w-full text-center rounded-full bg-indigo-50 font-bold\">Télécharger</a>\n    </div>\n}\n","import React, {useEffect, useState} from \"react\";\nimport * as generator from \"qr-code-generator\"\nimport logo from \"./assets/logo.png\"\nimport {QrCode} from \"./QrCode\";\n\ntype WasmGenerator = typeof generator\n\nfunction App() {\n    const [urlValue, setUrlValue] = useState(\"\");\n    const [wasmGenerator, setWasmGenerator] = useState<WasmGenerator| undefined>();\n    const [image, setImage] = useState<string | undefined>(undefined)\n\n    useEffect(() => {\n        const loadGenerator = async () => {\n            const wasmGenerator = await import(\"qr-code-generator\");\n            setWasmGenerator(wasmGenerator);\n        }\n\n        loadGenerator();\n    }, []);\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        setImage(wasmGenerator?.generate_qr_code_from_url(urlValue));\n    }\n\n    return (\n        <div className=\"h-screen w-screen bg-indigo-50\">\n            <div className=\"flex flex-col container mx-auto\">\n                <img className=\"w-full max-w-xl my-6 self-center\" alt=\"Logo QR Code Barista\" src={logo} />\n                <div className=\"rounded-lg h-auto py-3 px-6 bg-indigo-200 flex flex-col md:flex-row gap-8\">\n                    <form className=\"flex flex-col w-full gap-5 self-center\" onSubmit={handleSubmit}>\n                        <span className=\"font-bold text-center md:text-left\">Veuillez entrer l'adresse à infuser</span>\n                        <input className=\"px-7 py-3 rounded-full w-full\"\n                               value={urlValue}\n                               onChange={e => setUrlValue(e.target.value)}\n                               type=\"text\"\n                               placeholder=\"Entrez l'URL ici\"\n                        />\n                        <input className=\"rounded-full py-4 px-7 bg-indigo-100 font-bold\" type=\"submit\" value=\"Générer !\"/>\n                    </form>\n                    <div className=\"w-auto md:w-1/3 flex items-center justify-center\">\n                        { image ?\n                            <QrCode qrCode={image} />:\n                            <span className=\"italic\">Votre QR Code sera infusé ici</span>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {register} from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nregister()\n"],"sourceRoot":""}